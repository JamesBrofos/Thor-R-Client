N <- 1000
X <- rnorm(N)
X
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
X
## Generate data.
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
## Generate random linear coefficients.
theta <- rnorm(k) * 5
## Create targets (with normal errors).
y <- X %*% theta
y
## Generate data.
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
## Generate random linear coefficients.
theta <- rnorm(k) * 5
## Create targets (with standard normal errors).
y <- X %*% theta + rnorn(n)
## Generate data.
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
## Generate random linear coefficients.
theta <- rnorm(k) * 5
## Create targets (with standard normal errors).
y <- X %*% theta + rnorm(n)
y <- X %*% theta + rnorm(N)
## Generate data.
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
## Generate random linear coefficients.
theta <- rnorm(k) * 5
## Create targets (with standard normal errors).
y <- X %*% theta + rnorm(N)
y
## Generate data.
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
## Generate random linear coefficients.
theta <- rnorm(k) * 5
## Create targets (with standard normal errors).
y <- X %*% theta + rnorm(N)
## Iterate over batches.
batch.size <- 100
for (i in 1:batch.size) {
X.batch <- X[i*batch.size:(i+1)*batch.size, ]
print(X.batch)
}
for (i in 1:(batch.size-1)) {
X.batch <- X[i*batch.size:(i+1)*batch.size, ]
print(X.batch)
}
## Generate data.
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
## Generate random linear coefficients.
theta <- rnorm(k) * 5
## Create targets (with standard normal errors).
y <- X %*% theta + rnorm(N)
## Iterate over batches.
batch.size <- 100
for (i in 1:(batch.size-1)) {
X.batch <- X[i*batch.size:(i+1)*batch.size, ]
print(X.batch)
}
## Generate data.
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
## Generate random linear coefficients.
theta <- rnorm(k) * 5
## Create targets (with standard normal errors).
y <- X %*% theta + rnorm(N)
## Iterate over batches.
batch.size <- 100
for (i in 1:batch.size) {
X.batch <- X[(i-1)*batch.size:i*batch.size, ]
print(X.batch)
}
## Generate data.
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
## Generate random linear coefficients.
theta <- rnorm(k) * 5
## Create targets (with standard normal errors).
y <- X %*% theta + rnorm(N)
## Iterate over batches.
batch.size <- 100
for (i in 1:batch.size) {
X.batch <- X[((i-1)*batch.size + 1):i*batch.size, ]
print(X.batch)
}
## Generate data.
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
## Generate random linear coefficients.
theta <- rnorm(k) * 5
## Create targets (with standard normal errors).
y <- X %*% theta + rnorm(N)
## Iterate over batches.
batch.size <- 100
for (i in 1:batch.size) {
X.batch <- X[((i-1)*batch.size + 1):(i*batch.size), ]
print(X.batch)
}
## Generate data.
N <- 1000
k <- 3
X <- matrix(rnorm(N*k), ncol=3)
## Generate random linear coefficients.
theta <- rnorm(k) * 5
## Create targets (with standard normal errors).
y <- X %*% theta + rnorm(N)
## Iterate over batches.
batch.size <- 100
for (i in 1:(batch.size-1)) {
X.batch <- X[((i-1)*batch.size + 1):(i*batch.size), ]
print(X.batch)
}
## Link to the Thor MATLAB client.
source("../../thor_client/thor.client.R", chdir = TRUE)
## Authenticate with the Thor server.
auth.token <- '$2b$12$.wA/rDDnUeNFoXOxBcJ6ze2ZzIF16ThQMM8hPfvuTwtTwZYVDlpXK'
## Create experiment.
name <- "2-D Parabola (R)"
dims <- data.frame("name"=c("x", "y"),"dim_type"=c("linear", "linear"), "low"=c(-1., -1.), "high"=c(1., 1.))
exp <- create.experiment(auth.token, name, dims)
## Main optimization loop.
for (i in 1:30) {
## Request parameter recommendation.
rec <- create.recommendation(exp$id, auth.token)
c <- rec$config
## Evaluate the parameter recommendation.
v <- -(c$x^2 + c$y^2)
## Submit the parameter recommendation's value.
submit.recommendation(rec$id, auth.token, v)
}
getwd()
setwd("~/Desktop/Current/Personal/Enterprises/Books/Thor/Thor-R-Client/examples/Parabola/")
## Link to the Thor MATLAB client.
source("../../thor_client/thor.client.R", chdir = TRUE)
## Authenticate with the Thor server.
auth.token <- '$2b$12$.wA/rDDnUeNFoXOxBcJ6ze2ZzIF16ThQMM8hPfvuTwtTwZYVDlpXK'
## Create experiment.
name <- "2-D Parabola (R)"
dims <- data.frame("name"=c("x", "y"),"dim_type"=c("linear", "linear"), "low"=c(-1., -1.), "high"=c(1., 1.))
exp <- create.experiment(auth.token, name, dims)
## Main optimization loop.
for (i in 1:30) {
## Request parameter recommendation.
rec <- create.recommendation(exp$id, auth.token)
c <- rec$config
## Evaluate the parameter recommendation.
v <- -(c$x^2 + c$y^2)
## Submit the parameter recommendation's value.
submit.recommendation(rec$id, auth.token, v)
}
## Link to the Thor MATLAB client.
source("../../thor_client/thor.client.R", chdir = TRUE)
## Authenticate with the Thor server.
auth.token <- '$2b$12$.wA/rDDnUeNFoXOxBcJ6ze2ZzIF16ThQMM8hPfvuTwtTwZYVDlpXK'
## Create experiment.
name <- "2-D Parabola (R)"
dims <- data.frame("name"=c("x", "y"),"dim_type"=c("linear", "linear"), "low"=c(-1., -1.), "high"=c(1., 1.))
exp <- create.experiment(auth.token, name, dims)
## Main optimization loop.
for (i in 1:30) {
## Request parameter recommendation.
rec <- create.recommendation(exp$id, auth.token)
c <- rec$config
## Evaluate the parameter recommendation.
v <- -(c$x^2 + c$y^2)
## Submit the parameter recommendation's value.
submit.recommendation(rec$id, auth.token, v)
}
toJSON(list(rand_prob = NULL))
toJSON(list(rand_prob = 'null'))
toJSON(list(rand_prob = "null"))
toJSON(list(rand_prob = NaN))
toJSON(list(rand_prob = null))
toJSON(list(rand_prob = NULL))
toJSON(list(rand_prob = 1))
toJSON(list(rand_prob = unbox(1)))
toJSON(list(rand_prob = unbox("null")))
## Link to the Thor MATLAB client.
source("../../thor_client/thor.client.R", chdir = TRUE)
## Authenticate with the Thor server.
auth.token <- '$2b$12$.wA/rDDnUeNFoXOxBcJ6ze2ZzIF16ThQMM8hPfvuTwtTwZYVDlpXK'
## Create experiment.
name <- "2-D Parabola (R)"
dims <- data.frame("name"=c("x", "y"),"dim_type"=c("linear", "linear"), "low"=c(-1., -1.), "high"=c(1., 1.))
exp <- create.experiment(auth.token, name, dims)
## Main optimization loop.
for (i in 1:30) {
## Request parameter recommendation.
rec <- create.recommendation(exp$id, auth.token)
c <- rec$config
## Evaluate the parameter recommendation.
v <- -(c$x^2 + c$y^2)
## Submit the parameter recommendation's value.
submit.recommendation(rec$id, auth.token, v)
}
## Link to the Thor MATLAB client.
source("../../thor_client/thor.client.R", chdir = TRUE)
## Authenticate with the Thor server.
auth.token <- '$2b$12$.wA/rDDnUeNFoXOxBcJ6ze2ZzIF16ThQMM8hPfvuTwtTwZYVDlpXK'
## Create experiment.
name <- "2-D Parabola (R)"
dims <- data.frame("name"=c("x", "y"),"dim_type"=c("linear", "linear"), "low"=c(-1., -1.), "high"=c(1., 1.))
exp <- create.experiment(auth.token, name, dims)
## Main optimization loop.
for (i in 1:30) {
## Request parameter recommendation.
rec <- create.recommendation(exp$id, auth.token)
c <- rec$config
## Evaluate the parameter recommendation.
v <- -(c$x^2 + c$y^2)
## Submit the parameter recommendation's value.
submit.recommendation(rec$id, auth.token, v)
}
## Link to the Thor MATLAB client.
source("../../thor_client/thor.client.R", chdir = TRUE)
## Authenticate with the Thor server.
auth.token <- '$2b$12$.wA/rDDnUeNFoXOxBcJ6ze2ZzIF16ThQMM8hPfvuTwtTwZYVDlpXK'
## Create experiment.
name <- "2-D Parabola (R)"
dims <- data.frame("name"=c("x", "y"),"dim_type"=c("linear", "linear"), "low"=c(-1., -1.), "high"=c(1., 1.))
exp <- create.experiment(auth.token, name, dims)
## Main optimization loop.
for (i in 1:30) {
## Request parameter recommendation.
rec <- create.recommendation(exp$id, auth.token)
c <- rec$config
## Evaluate the parameter recommendation.
v <- -(c$x^2 + c$y^2)
## Submit the parameter recommendation's value.
submit.recommendation(rec$id, auth.token, v)
}
## Link to the Thor MATLAB client.
source("../../thor_client/thor.client.R", chdir = TRUE)
## Authenticate with the Thor server.
auth.token <- '$2b$12$.wA/rDDnUeNFoXOxBcJ6ze2ZzIF16ThQMM8hPfvuTwtTwZYVDlpXK'
## Create experiment.
name <- "2-D Parabola (R)"
dims <- data.frame("name"=c("x", "y"),"dim_type"=c("linear", "linear"), "low"=c(-1., -1.), "high"=c(1., 1.))
exp <- create.experiment(auth.token, name, dims)
## Main optimization loop.
for (i in 1:30) {
## Request parameter recommendation.
rec <- create.recommendation(exp$id, auth.token)
c <- rec$config
## Evaluate the parameter recommendation.
v <- -(c$x^2 + c$y^2)
## Submit the parameter recommendation's value.
submit.recommendation(rec$id, auth.token, v)
}
## Link to the Thor MATLAB client.
source("../../thor_client/thor.client.R", chdir = TRUE)
## Authenticate with the Thor server.
auth.token <- '$2b$12$.wA/rDDnUeNFoXOxBcJ6ze2ZzIF16ThQMM8hPfvuTwtTwZYVDlpXK'
## Create experiment.
name <- "2-D Parabola (R)"
dims <- data.frame("name"=c("x", "y"),"dim_type"=c("linear", "linear"), "low"=c(-1., -1.), "high"=c(1., 1.))
exp <- create.experiment(auth.token, name, dims)
## Main optimization loop.
for (i in 1:30) {
## Request parameter recommendation.
rec <- create.recommendation(exp$id, auth.token)
c <- rec$config
## Evaluate the parameter recommendation.
v <- -(c$x^2 + c$y^2)
## Submit the parameter recommendation's value.
submit.recommendation(rec$id, auth.token, v)
}
